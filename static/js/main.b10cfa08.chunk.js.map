{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","mmStatus","setMmStatus","address","setAddress","displayMessage","setDisplayMessage","web3","Web3","window","ethereum","Message","eth","Contract","inputs","name","outputs","internalType","type","stateMutability","constant","request","method","accounts","console","log","methods","read","call","getMessage","document","getElementById","value","getAccounts","then","write","send","from","setProvider","className","onClick","placeholder","id","ReactDOM","createRoot","render","StrictMode"],"mappings":"0kBA6IeA,MAzIf,WAEE,MAAgCC,mBAAS,mBAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,YAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAqCMC,EAAO,IAAIC,IAAKC,OAAOC,UAEvBC,EAAU,IAAIJ,EAAKK,IAAIC,SAnCjB,CACV,CACEC,OAAQ,GACRC,KAAM,OACNC,QAAS,CACP,CACEC,aAAc,SACdF,KAAM,GACNG,KAAM,WAGVC,gBAAiB,OACjBD,KAAM,WACNE,UAAU,GAEZ,CACEN,OAAQ,CACN,CACEG,aAAc,SACdF,KAAM,aACNG,KAAM,WAGVH,KAAM,QACNC,QAAS,GACTG,gBAAiB,aACjBD,KAAM,aAKc,8CAvCX,sDA+Cb,kGAEMT,OAAOC,SAFb,wBAGIR,EAAY,sEAHhB,kBAM6BO,OAAOC,SAASW,QAAQ,CAC7CC,OAAQ,wBAPhB,OAMYC,EANZ,OAUMnB,EAAWmB,EAAS,IAV1B,gDAYMC,QAAQC,IAAI,UAAZ,MAZN,gCAeIvB,EAAY,6DAfhB,0DA/Ca,4EAmEb,8GAE6BS,EAAQe,QAAQC,OAAOC,OAFpD,OAEMvB,EAFN,OAGEC,EAAkBD,GAHpB,2CAnEa,8EA0Eb,8FAEMwB,EAAaC,SAASC,eAAe,WAAWC,MAGpDzB,EAAKK,IAAIqB,cAAcC,MAAK,SAAUX,GACpCZ,EAAQe,QAAQS,MAAMN,GAAYO,KAAK,CAAEC,KAAMd,EAAS,QAN5D,4CA1Ea,sBAoFb,OAxCAZ,EAAQ2B,YAAY7B,OAAOC,UAyCzB,gCAEE,qBAAK6B,UAAU,cAAf,SAA8BtC,IAC9B,uBACA,oBAAIsC,UAAU,sCAAd,uCAEA,iCACE,wBACEA,UAAU,6EACVC,QA9FK,2CA4FP,8BAQF,qBAAKD,UAAU,sBAAf,SAAsCpC,IAEtC,yBAAQoC,UAAU,QAAlB,UACE,uBACErB,KAAM,OACNuB,YAAa,gBACbC,GAAG,UACHH,UAAU,sDAEZ,wBACEA,UAAU,6DACVC,QA/GK,2CA6GP,kBAOA,wBACED,UAAU,6DACVC,QAtHK,2CAoHP,wBAOF,mBAAGD,UAAU,2BAAb,SACE,2IAMF,qBAAKA,UAAU,6BAAf,SACE,4BAAIlC,UClICsC,IAASC,WAAWd,SAASC,eAAe,SACpDc,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,S","file":"static/js/main.b10cfa08.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\nfunction App() {\n  // React hooks\n  const [mmStatus, setMmStatus] = useState(\"Metamask status\");\n  const [address, setAddress] = useState(\"Address:\");\n  const [displayMessage, setDisplayMessage] = useState(\"\");\n\n  // Contract ABI (Application Binary Interface) is a json file that interacts with smart contracts.\n  // It's a bridge between front-end and EVM.\n  const ABI = [\n    {\n      inputs: [],\n      name: \"read\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n      constant: true,\n    },\n    {\n      inputs: [\n        {\n          internalType: \"string\",\n          name: \"newMessage\",\n          type: \"string\",\n        },\n      ],\n      name: \"write\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  ];\n\n  //Contract Address refers to the address where the contract is deployed on Ethereum blockchain.\n  const contractAddress = \"0x285594f491fDb7a204EBBB26bC095e69F4BA6914\";\n\n  const web3 = new Web3(window.ethereum);\n  // Instantiate smart contract instance\n  const Message = new web3.eth.Contract(ABI, contractAddress);\n  Message.setProvider(window.ethereum);\n\n  // Connect to Metamask wallet\n  async function connectWallet() {\n    // Check Metamask status\n    if (window.ethereum) {\n      setMmStatus(\"‚úÖ Metamask detected! Make sure you're on the rinkeby network.\");\n      try {\n        // Metamask popup will appear to connect the account\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        // Get address of the account\n        setAddress(accounts[0]);\n      } catch (error) {\n        console.log(\"Error: \", error);\n      }\n    } else {\n      setMmStatus(\"‚ö†Ô∏è No wallet detected! Please install Metamask.\");\n    }\n  }\n\n  // Read message from smart contract\n  async function receive() {\n    // Display message\n    var displayMessage = await Message.methods.read().call();\n    setDisplayMessage(displayMessage);\n  }\n\n  // Write message to smart contract\n  async function send() {\n    // Get input value of message\n    var getMessage = document.getElementById(\"message\").value;\n\n    // Send message to smart contract\n    web3.eth.getAccounts().then(function (accounts) {\n      Message.methods.write(getMessage).send({ from: accounts[0] });\n    });\n  }\n\n  return (\n    <div>\n      {/* Metamask status */}\n      <div className=\"text-center\">{mmStatus}</div>\n      <hr />\n      <h1 className=\"text-center text-4xl font-bold mt-6\">Message Dapp üëã</h1>\n      {/* Connect to Metamask */}\n      <center>\n        <button\n          className=\"text-center items-center border-2 border-blue-500 rounded-md p-1 mt-6 mb-6\"\n          onClick={connectWallet}\n        >\n          Connect wallet\n        </button>\n      </center>\n      {/* Show account address */}\n      <div className=\"text-center text-sm\">{address}</div>\n      {/* Send message */}\n      <center className=\"mt-12\">\n        <input\n          type={\"text\"}\n          placeholder={\"Enter message\"}\n          id=\"message\"\n          className=\"text-left border-2 border-gray-300 rounded-sm p-1\"\n        />\n        <button\n          className=\"text-center border-2 border-gray-500 rounded ml-2 p-1 w-16\"\n          onClick={send}\n        >\n          Send\n        </button>\n        {/* Receive message */}\n        <button\n          className=\"text-center border-2 border-gray-500 rounded ml-2 p-1 w-18\"\n          onClick={receive}\n        >\n          Receive\n        </button>\n      </center>\n      <p className=\"text-center text-xs mt-6\">\n        <i>\n          Please wait till the transaction is completed, then click on the Receive\n          button to display your message.\n        </i>\n      </p>\n      {/* Display message */}\n      <div className=\"text-center text-3xl mt-10\">\n        <b>{displayMessage}</b>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}